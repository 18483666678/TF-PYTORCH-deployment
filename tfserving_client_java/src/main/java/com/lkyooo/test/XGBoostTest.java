package com.lkyooo.test;

import ml.dmlc.xgboost4j.java.Booster;
import ml.dmlc.xgboost4j.java.DMatrix;
import ml.dmlc.xgboost4j.java.XGBoost;

import java.io.File;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class XGBoostTest {

    public static void main(String[] args) throws Exception {
        // load file from text file, also binary buffer generated by xgboost4j
        DMatrix trainMat = new DMatrix("model/num.train.csv.libsvm");
        DMatrix testMat = new DMatrix("model/num.test.csv.libsvm");
        Map<String, Object> params = new HashMap<>();
        params.put("eta", 0.3);
        params.put("max_depth", 10);
        params.put("objective", "reg:squarederror");
        params.put("booster", "gblinear");
        Map<String, DMatrix> watches = new HashMap<>();
        watches.put("train", trainMat);
        watches.put("test", testMat);
        //set round
        int round = 3;
        //train a boost model
        Booster booster = XGBoost.train(trainMat, params, round, watches, null, null);
        //predict
        float[][] predicts = booster.predict(testMat);
        //save model to modelPath
        File file = new File("./model");
        if (!file.exists()) {
            file.mkdirs();
        }
        booster.saveModel("./model/xgb.model");
        //save dmatrix into binary buffer
        testMat.saveBinary("./model/dtest.buffer");
        //reload model and data
        Booster booster2 = XGBoost.loadModel("./model/xgb.model");
        DMatrix testMat2 = new DMatrix("./model/dtest.buffer");
        float[][] predicts2 = booster2.predict(testMat2);
        //check the two predicts
        System.out.println(checkPredicts(predicts, predicts2));
    }

    public static boolean checkPredicts(float[][] fPredicts, float[][] sPredicts) {
        if (fPredicts.length != sPredicts.length) {
            return false;
        }
        for (int i = 0; i < fPredicts.length; i++) {
            if (!Arrays.equals(fPredicts[i], sPredicts[i])) {
                return false;
            }
        }
        return true;
    }
}
